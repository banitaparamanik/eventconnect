import 'package:flutter/material.dart';
import 'package:sizer/sizer.dart';

import '../../../core/app_export.dart';
import '../../../widgets/custom_icon_widget.dart';

// lib/presentation/chat_interface/widgets/chat_input_widget.dart

class ChatInputWidget extends StatefulWidget {
  final TextEditingController controller;
  final FocusNode focusNode;
  final bool isTyping;
  final bool isRecordingVoice;
  final VoidCallback onSendPressed;
  final VoidCallback onAttachmentPressed;
  final VoidCallback onVoiceRecordStart;
  final VoidCallback onVoiceRecordStop;

  const ChatInputWidget({
    super.key,
    required this.controller,
    required this.focusNode,
    required this.isTyping,
    required this.isRecordingVoice,
    required this.onSendPressed,
    required this.onAttachmentPressed,
    required this.onVoiceRecordStart,
    required this.onVoiceRecordStop,
  });

  @override
  State<ChatInputWidget> createState() => _ChatInputWidgetState();
}

class _ChatInputWidgetState extends State<ChatInputWidget> {
  bool _showEmojiPicker = false;

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Theme.of(context).scaffoldBackgroundColor,
        border: Border(
          top: BorderSide(
            color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.2),
            width: 1,
          ),
        ),
      ),
      child: Column(
        children: [
          if (widget.isRecordingVoice) _buildVoiceRecordingIndicator(),
          _buildInputRow(),
          if (_showEmojiPicker) _buildEmojiPicker(),
        ],
      ),
    );
  }

  Widget _buildVoiceRecordingIndicator() {
    return Container(
      padding: EdgeInsets.symmetric(
        horizontal: 4.w,
        vertical: 1.h,
      ),
      child: Row(
        children: [
          Container(
            width: 3.w,
            height: 3.w,
            decoration: BoxDecoration(
              color: Colors.red,
              shape: BoxShape.circle,
            ),
          ),
          SizedBox(width: 2.w),
          Text(
            'Recording...',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  color: Colors.red,
                  fontWeight: FontWeight.w500,
                ),
          ),
          const Spacer(),
          Text(
            '0:03',
            style: Theme.of(context).textTheme.bodyMedium,
          ),
        ],
      ),
    );
  }

  Widget _buildInputRow() {
    return SafeArea(
      child: Container(
        padding: EdgeInsets.symmetric(
          horizontal: 2.w,
          vertical: 1.h,
        ),
        child: Row(
          children: [
            // Attachment button
            IconButton(
              icon: const CustomIconWidget(
                iconName: 'attach_file',
                size: 24,
              ),
              onPressed: widget.onAttachmentPressed,
            ),
            // Text input field
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.surface,
                  borderRadius: BorderRadius.circular(25),
                  border: Border.all(
                    color: Theme.of(context)
                        .colorScheme
                        .outline
                        .withValues(alpha: 0.3),
                    width: 1,
                  ),
                ),
                child: Row(
                  children: [
                    // Emoji button
                    IconButton(
                      icon: CustomIconWidget(
                        iconName:
                            _showEmojiPicker ? 'keyboard' : 'emoji_emotions',
                        size: 24,
                        color: Theme.of(context).colorScheme.onSurfaceVariant,
                      ),
                      onPressed: () {
                        setState(() {
                          _showEmojiPicker = !_showEmojiPicker;
                        });
                        if (_showEmojiPicker) {
                          widget.focusNode.unfocus();
                        } else {
                          widget.focusNode.requestFocus();
                        }
                      },
                    ),
                    // Text field
                    Expanded(
                      child: TextField(
                        controller: widget.controller,
                        focusNode: widget.focusNode,
                        maxLines: 4,
                        minLines: 1,
                        decoration: const InputDecoration(
                          hintText: 'Type a message...',
                          border: InputBorder.none,
                          contentPadding: EdgeInsets.symmetric(vertical: 12),
                        ),
                        onTap: () {
                          if (_showEmojiPicker) {
                            setState(() {
                              _showEmojiPicker = false;
                            });
                          }
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(width: 2.w),
            // Send/Voice button
            widget.isTyping ? _buildSendButton() : _buildVoiceButton(),
          ],
        ),
      ),
    );
  }

  Widget _buildSendButton() {
    return GestureDetector(
      onTap: widget.onSendPressed,
      child: Container(
        width: 12.w,
        height: 12.w,
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.primary,
          shape: BoxShape.circle,
        ),
        child: const CustomIconWidget(
          iconName: 'send',
          size: 20,
          color: Colors.white,
        ),
      ),
    );
  }

  Widget _buildVoiceButton() {
    return GestureDetector(
      onLongPressStart: (_) => widget.onVoiceRecordStart(),
      onLongPressEnd: (_) => widget.onVoiceRecordStop(),
      child: Container(
        width: 12.w,
        height: 12.w,
        decoration: BoxDecoration(
          color: widget.isRecordingVoice
              ? Colors.red
              : Theme.of(context).colorScheme.primary,
          shape: BoxShape.circle,
        ),
        child: const CustomIconWidget(
          iconName: 'mic',
          size: 20,
          color: Colors.white,
        ),
      ),
    );
  }

  Widget _buildEmojiPicker() {
    return Container(
      height: 40.h,
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        border: Border(
          top: BorderSide(
            color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.2),
            width: 1,
          ),
        ),
      ),
      child: Column(
        children: [
          Container(
            padding: EdgeInsets.symmetric(
              horizontal: 4.w,
              vertical: 1.h,
            ),
            child: Row(
              children: [
                Text(
                  'Emojis',
                  style: Theme.of(context).textTheme.titleMedium,
                ),
                const Spacer(),
                IconButton(
                  icon: const CustomIconWidget(
                    iconName: 'close',
                    size: 20,
                  ),
                  onPressed: () {
                    setState(() {
                      _showEmojiPicker = false;
                    });
                  },
                ),
              ],
            ),
          ),
          Expanded(
            child: GridView.builder(
              padding: EdgeInsets.symmetric(horizontal: 4.w),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 8,
                mainAxisSpacing: 2.w,
                crossAxisSpacing: 2.w,
              ),
              itemCount: _getEmojis().length,
              itemBuilder: (context, index) {
                final emoji = _getEmojis()[index];
                return GestureDetector(
                  onTap: () => _insertEmoji(emoji),
                  child: Container(
                    decoration: BoxDecoration(
                      color: Theme.of(context).colorScheme.surfaceContainerHighest,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Center(
                      child: Text(
                        emoji,
                        style: TextStyle(fontSize: 6.w),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  void _insertEmoji(String emoji) {
    final text = widget.controller.text;
    final selection = widget.controller.selection;
    final newText = text.replaceRange(
      selection.start,
      selection.end,
      emoji,
    );
    widget.controller.text = newText;
    widget.controller.selection = TextSelection.collapsed(
      offset: selection.start + emoji.length,
    );
  }

  List<String> _getEmojis() {
    return [
      '😀',
      '😃',
      '😄',
      '😁',
      '😆',
      '😅',
      '😂',
      '🤣',
      '😊',
      '😇',
      '🙂',
      '🙃',
      '😉',
      '😌',
      '😍',
      '🥰',
      '😘',
      '😗',
      '😙',
      '😚',
      '😋',
      '😛',
      '😝',
      '😜',
      '🤪',
      '🤨',
      '🧐',
      '🤓',
      '😎',
      '🥸',
      '🤩',
      '🥳',
      '😏',
      '😒',
      '😞',
      '😔',
      '😟',
      '😕',
      '🙁',
      '☹️',
      '😣',
      '😖',
      '😫',
      '😩',
      '🥺',
      '😢',
      '😭',
      '😤',
      '😠',
      '😡',
      '🤬',
      '🤯',
      '😳',
      '🥵',
      '🥶',
      '😱',
      '😨',
      '😰',
      '😥',
      '😓',
      '🤗',
      '🤔',
      '🤭',
      '🤫',
      '🤥',
      '😶',
      '😐',
      '😑',
      '😬',
      '🙄',
      '😯',
      '😦',
      '😧',
      '😮',
      '😲',
      '🥱',
      '😴',
      '🤤',
      '😪',
      '😵',
      '🤐',
      '🥴',
      '🤢',
      '🤮',
      '🤧',
      '😷',
      '🤒',
      '🤕',
      '🤑',
      '🤠',
      '😈',
      '👿',
      '👹',
      '👺',
      '🤡',
      '💩',
      '👻',
      '💀',
      '☠️',
      '👽',
      '👾',
      '🤖',
      '🎃',
      '😺',
      '😸',
      '😹',
      '😻',
      '😼',
      '😽',
      '🙀',
      '😿',
      '😾',
      '👋',
      '🤚',
      '🖐',
      '✋',
      '🖖',
      '👌',
      '🤌',
      '🤏',
      '✌️',
      '🤞',
      '🤟',
      '🤘',
      '🤙',
      '👈',
      '👉',
      '👆',
      '🖕',
      '👇',
      '☝️',
      '👍',
      '👎',
      '👊',
      '✊',
      '🤛',
      '🤜',
      '👏',
      '🙌',
      '👐',
      '🤲',
      '🤝',
      '🙏',
      '✍️',
      '💅',
      '🤳',
      '💪',
      '🦾',
      '🦿',
      '🦵',
      '🦶',
      '👂',
      '🦻',
      '👃',
      '🧠',
      '🫀',
      '🫁',
      '🦷',
      '🦴',
      '👀',
      '👁',
      '👅',
      '👄',
      '💋',
      '🩸',
      '👶',
      '🧒',
      '👦',
      '👧',
      '🧑',
      '👱',
      '👨',
      '🧔',
      '👨‍🦰',
      '👨‍🦱',
      '👨‍🦳',
      '👨‍🦲',
      '👩',
      '👩‍🦰',
      '👩‍🦱',
      '👩‍🦳',
      '👩‍🦲',
      '👱‍♀️',
      '👱‍♂️',
      '🧓',
      '👴',
      '👵',
      '🙍',
      '🙍‍♂️',
      '🙍‍♀️',
      '🙎',
      '🙎‍♂️',
      '🙎‍♀️',
      '🙅',
      '🙅‍♂️',
      '🙅‍♀️',
      '🙆',
      '🙆‍♂️',
      '🙆‍♀️',
      '💁',
      '💁‍♂️',
      '💁‍♀️',
      '🙋',
      '🙋‍♂️',
      '🙋‍♀️',
      '🧏',
      '🧏‍♂️',
      '🧏‍♀️',
      '🙇',
      '🙇‍♂️',
      '🙇‍♀️',
      '🤦',
      '🤦‍♂️',
      '🤦‍♀️',
      '🤷',
      '🤷‍♂️',
      '🤷‍♀️',
      '🧑‍⚕️',
      '👨‍⚕️',
      '👩‍⚕️',
      '🧑‍🎓',
      '👨‍🎓',
      '👩‍🎓',
      '🧑‍🏫',
      '👨‍🏫',
      '👩‍🏫',
      '🧑‍⚖️',
      '👨‍⚖️',
      '👩‍⚖️',
      '🧑‍🌾',
      '👨‍🌾',
      '👩‍🌾',
      '🧑‍🍳',
      '👨‍🍳',
      '👩‍🍳',
      '🧑‍🔧',
      '👨‍🔧',
      '👩‍🔧',
      '🧑‍🏭',
      '👨‍🏭',
      '👩‍🏭',
      '🧑‍💼',
      '👨‍💼',
      '👩‍💼',
      '🧑‍🔬',
      '👨‍🔬',
      '👩‍🔬',
      '🧑‍💻',
      '👨‍💻',
      '👩‍💻',
      '🧑‍🎤',
      '👨‍🎤',
      '👩‍🎤',
      '🧑‍🎨',
      '👨‍🎨',
      '👩‍🎨',
      '🧑‍✈️',
      '👨‍✈️',
      '👩‍✈️',
      '🧑‍🚀',
      '👨‍🚀',
      '👩‍🚀',
      '🧑‍🚒',
      '👨‍🚒',
      '👩‍🚒',
      '👮',
      '👮‍♂️',
      '👮‍♀️',
      '🕵',
      '🕵️‍♂️',
      '🕵️‍♀️',
      '💂',
      '💂‍♂️',
      '💂‍♀️',
      '🥷',
      '👷',
      '👷‍♂️',
      '👷‍♀️',
      '🤴',
      '👸',
      '👳',
      '👳‍♂️',
      '👳‍♀️',
      '👲',
      '🧕',
      '🤵',
      '🤵‍♂️',
      '🤵‍♀️',
      '👰',
      '👰‍♂️',
      '👰‍♀️',
      '🤱',
      '🤰',
      '👼',
      '🎅',
      '🤶',
      '🧑‍🎄',
      '🦸',
      '🦸‍♂️',
      '🦸‍♀️',
      '🦹',
      '🦹‍♂️',
      '🦹‍♀️',
      '🧙',
      '🧙‍♂️',
      '🧙‍♀️',
      '🧚',
      '🧚‍♂️',
      '🧚‍♀️',
      '🧛',
      '🧛‍♂️',
      '🧛‍♀️',
      '🧜',
      '🧜‍♂️',
      '🧜‍♀️',
      '🧝',
      '🧝‍♂️',
      '🧝‍♀️',
      '🧞',
      '🧞‍♂️',
      '🧞‍♀️',
      '🧟',
      '🧟‍♂️',
      '🧟‍♀️',
      '💆',
      '💆‍♂️',
      '💆‍♀️',
      '💇',
      '💇‍♂️',
      '💇‍♀️',
      '🚶',
      '🚶‍♂️',
      '🚶‍♀️',
      '🧍',
      '🧍‍♂️',
      '🧍‍♀️',
      '🧎',
      '🧎‍♂️',
      '🧎‍♀️',
      '🧑‍🦯',
      '👨‍🦯',
      '👩‍🦯',
      '🧑‍🦼',
      '👨‍🦼',
      '👩‍🦼',
      '🧑‍🦽',
      '👨‍🦽',
      '👩‍🦽',
      '🏃',
      '🏃‍♂️',
      '🏃‍♀️',
      '💃',
      '🕺',
      '🕴',
      '👯',
      '👯‍♂️',
      '👯‍♀️',
      '🧖',
      '🧖‍♂️',
      '🧖‍♀️',
      '🧗',
      '🧗‍♂️',
      '🧗‍♀️',
      '🤺',
      '🏇',
      '⛷',
      '🏂',
      '🏌',
      '🏌️‍♂️',
      '🏌️‍♀️',
      '🏄',
      '🏄‍♂️',
      '🏄‍♀️',
      '🚣',
      '🚣‍♂️',
      '🚣‍♀️',
      '🏊',
      '🏊‍♂️',
      '🏊‍♀️',
      '⛹',
      '⛹️‍♂️',
      '⛹️‍♀️',
      '🏋',
      '🏋️‍♂️',
      '🏋️‍♀️',
      '🚴',
      '🚴‍♂️',
      '🚴‍♀️',
      '🚵',
      '🚵‍♂️',
      '🚵‍♀️',
      '🤸',
      '🤸‍♂️',
      '🤸‍♀️',
      '🤼',
      '🤼‍♂️',
      '🤼‍♀️',
      '🤽',
      '🤽‍♂️',
      '🤽‍♀️',
      '🤾',
      '🤾‍♂️',
      '🤾‍♀️',
      '🤹',
      '🤹‍♂️',
      '🤹‍♀️',
      '🧘',
      '🧘‍♂️',
      '🧘‍♀️',
      '🛀',
      '🛌',
      '🧑‍🤝‍🧑',
      '👭',
      '👫',
      '👬',
      '💏',
      '👩‍❤️‍💋‍👨',
      '👨‍❤️‍💋‍👨',
      '👩‍❤️‍💋‍👩',
      '💑',
      '👩‍❤️‍👨',
      '👨‍❤️‍👨',
      '👩‍❤️‍👩',
      '👪',
      '👨‍👩‍👧',
      '👨‍👩‍👧‍👦',
      '👨‍👩‍👦‍👦',
      '👨‍👩‍👧‍👧',
      '👨‍👨‍👦',
      '👨‍👨‍👧',
      '👨‍👨‍👧‍👦',
      '👨‍👨‍👦‍👦',
      '👨‍👨‍👧‍👧',
      '👩‍👩‍👦',
      '👩‍👩‍👧',
      '👩‍👩‍👧‍👦',
      '👩‍👩‍👦‍👦',
      '👩‍👩‍👧‍👧',
      '👨‍👦',
      '👨‍👦‍👦',
      '👨‍👧',
      '👨‍👧‍👦',
      '👨‍👧‍👧',
      '👩‍👦',
      '👩‍👦‍👦',
      '👩‍👧',
      '👩‍👧‍👦',
      '👩‍👧‍👧',
      '🗣',
      '👤',
      '👥',
      '🫂',
      '👣',
      '🐵',
      '🐒',
      '🦍',
      '🦧',
      '🐶',
      '🐕',
      '🦮',
      '🐕‍🦺',
      '🐩',
      '🐺',
      '🦊',
      '🦝',
      '🐱',
      '🐈',
      '🐈‍⬛',
      '🦁',
      '🐯',
      '🐅',
      '🐆',
      '🐴',
      '🐎',
      '🦄',
      '🦓',
      '🦌',
      '🦬',
      '🐮',
      '🐂',
      '🐃',
      '🐄',
      '🐷',
      '🐖',
      '🐗',
      '🐽',
      '🐏',
      '🐑',
      '🐐',
      '🐪',
      '🐫',
      '🦙',
      '🦒',
      '🐘',
      '🦣',
      '🦏',
      '🦛',
      '🐭',
      '🐁',
      '🐀',
      '🐹',
      '🐰',
      '🐇',
      '🐿',
      '🦫',
      '🦔',
      '🦇',
      '🐻',
      '🐻‍❄️',
      '🐨',
      '🐼',
      '🦥',
      '🦦',
      '🦨',
      '🦘',
      '🦡',
      '🐾',
      '🦃',
      '🐔',
      '🐓',
      '🐣',
      '🐤',
      '🐥',
      '🐦',
      '🐧',
      '🕊',
      '🦅',
      '🦆',
      '🦢',
      '🦉',
      '🦤',
      '🪶',
      '🦩',
      '🦚',
      '🦜',
      '🐸',
      '🐊',
      '🐢',
      '🦎',
      '🐍',
      '🐲',
      '🐉',
      '🦕',
      '🦖',
      '🐳',
      '🐋',
      '🐬',
      '🦭',
      '🐟',
      '🐠',
      '🐡',
      '🦈',
      '🐙',
      '🐚',
      '🐌',
      '🦋',
      '🐛',
      '🐜',
      '🐝',
      '🪲',
      '🐞',
      '🦗',
      '🕷',
      '🪳',
      '🕸',
      '🦂',
      '🦟',
      '🪰',
      '🪱',
      '🦠',
      '💐',
      '🌸',
      '💮',
      '🏵',
      '🌹',
      '🥀',
      '🌺',
      '🌻',
      '🌼',
      '🌷',
      '🌱',
      '🪴',
      '🌲',
      '🌳',
      '🌴',
      '🌵',
      '🌶',
      '🌾',
      '🌿',
      '☘',
      '🍀',
      '🍁',
      '🍂',
      '🍃',
      '🍇',
      '🍈',
      '🍉',
      '🍊',
      '🍋',
      '🍌',
      '🍍',
      '🥭',
      '🍎',
      '🍏',
      '🍐',
      '🍑',
      '🍒',
      '🍓',
      '🫐',
      '🥝',
      '🍅',
      '🫒',
      '🥥',
      '🥑',
      '🍆',
      '🥔',
      '🥕',
      '🌽',
      '🌶',
      '🫑',
      '🥒',
      '🥬',
      '🥦',
      '🧄',
      '🧅',
      '🍄',
      '🥜',
      '🌰',
      '🍞',
      '🥐',
      '🥖',
      '🫓',
      '🥨',
      '🥯',
      '🥞',
      '🧇',
      '🧀',
      '🍖',
      '🍗',
      '🥩',
      '🥓',
      '🍔',
      '🍟',
      '🍕',
      '🌭',
      '🥪',
      '🌮',
      '🌯',
      '🫔',
      '🥙',
      '🧆',
      '🥚',
      '🍳',
      '🥘',
      '🍲',
      '🫕',
      '🥣',
      '🥗',
      '🍿',
      '🧈',
      '🧂',
      '🥫',
      '🍱',
      '🍘',
      '🍙',
      '🍚',
      '🍛',
      '🍜',
      '🍝',
      '🍠',
      '🍢',
      '🍣',
      '🍤',
      '🍥',
      '🥮',
      '🍡',
      '🥟',
      '🥠',
      '🥡',
      '🦀',
      '🦞',
      '🦐',
      '🦑',
      '🦪',
      '🍦',
      '🍧',
      '🍨',
      '🍩',
      '🍪',
      '🎂',
      '🍰',
      '🧁',
      '🥧',
      '🍫',
      '🍬',
      '🍭',
      '🍮',
      '🍯',
      '🍼',
      '🥛',
      '☕',
      '🫖',
      '🍵',
      '🍶',
      '🍾',
      '🍷',
      '🍸',
      '🍹',
      '🍺',
      '🍻',
      '🥂',
      '🥃',
      '🥤',
      '🧋',
      '🧃',
      '🧉',
      '🧊',
      '🥢',
      '🍽',
      '🍴',
      '🥄',
      '🔪',
      '🏺',
      '🌍',
      '🌎',
      '🌏',
      '🌐',
      '🗺',
      '🧭',
      '🏔',
      '⛰',
      '🌋',
      '🗻',
      '🏕',
      '🏖',
      '🏜',
      '🏝',
      '🏞',
      '🏟',
      '🏛',
      '🏗',
      '🧱',
      '🪨',
      '🪵',
      '🛖',
      '🏘',
      '🏚',
      '🏠',
      '🏡',
      '🏢',
      '🏣',
      '🏤',
      '🏥',
      '🏦',
      '🏨',
      '🏩',
      '🏪',
      '🏫',
      '🏬',
      '🏭',
      '🏯',
      '🏰',
      '🗼',
      '🗽',
      '⛪',
      '🕌',
      '🛕',
      '🕍',
      '⛩',
      '🕋',
      '⛲',
      '⛺',
      '🌁',
      '🌃',
      '🏙',
      '🌄',
      '🌅',
      '🌆',
      '🌇',
      '🌉',
      '♨',
      '🎠',
      '🎡',
      '🎢',
      '💈',
      '🎪',
      '🚂',
      '🚃',
      '🚄',
      '🚅',
      '🚆',
      '🚇',
      '🚈',
      '🚉',
      '🚊',
      '🚝',
      '🚞',
      '🚋',
      '🚌',
      '🚍',
      '🚎',
      '🚐',
      '🚑',
      '🚒',
      '🚓',
      '🚔',
      '🚕',
      '🚖',
      '🚗',
      '🚘',
      '🚙',
      '🛻',
      '🚚',
      '🚛',
      '🚜',
      '🏎',
      '🏍',
      '🛵',
      '🦽',
      '🦼',
      '🛺',
      '🚲',
      '🛴',
      '🛹',
      '🛼',
      '🚁',
      '🚟',
      '🚠',
      '🚡',
      '🛰',
      '🚀',
      '🛸',
      '🛶',
      '⛵',
      '🚤',
      '🛥',
      '🛳',
      '⛴',
      '🚢',
      '⚓',
      '⛽',
      '🚧',
      '🚨',
      '🚥',
      '🚦',
      '🛑',
      '🚏',
      '⛱',
      '🎰',
      '🎱',
      '🎲',
      '🎳',
      '🎴',
      '🃏',
      '🀄',
      '🎭',
      '🖼',
      '🎨',
      '🧵',
      '🪡',
      '🧶',
      '🪢',
    ];
  }
}
